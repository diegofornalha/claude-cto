interface SimpleFile {
  filename: string;
  content: string;
}

interface FileSummary {
  filename: string;
  summary: string;
}

/**
 * Um prompt texto->texto para resumir um arquivo e seu conte√∫do.
 */
export const SUMMARIZE_FILE_PROMPT = ({ filename, content }: SimpleFile) => `
Forne√ßa um resumo em portugu√™s do Brasil, com no m√°ximo 2 frases, sobre o seguinte arquivo de c√≥digo:

Nome do arquivo: ${filename}
Conte√∫do do arquivo:
${content}
`.trim();

/**
 * Um prompt texto->texto para gerar um arquivo README.md para uma pasta com os
 * resumos de arquivos fornecidos.
 */
export const GENERATE_README_PROMPT = ({ folderName, fileSummaries }: { folderName: string; fileSummaries: FileSummary[] }) => `
Crie um arquivo README.md detalhado e bem estruturado em portugu√™s do Brasil para a seguinte pasta contendo c√≥digo:

Nome da pasta: ${folderName}

${fileSummaries.map(({ filename, summary }) => `Arquivo ${filename}: ${summary}`.trim()).join('\n\n')}

Diretrizes para o README:
1. Use emojis apropriados para melhorar a visualiza√ß√£o (por exemplo: üìã para sum√°rio, üîç para vis√£o geral, etc.)
2. Inclua um sum√°rio naveg√°vel no in√≠cio com links para as se√ß√µes
3. Forne√ßa uma vis√£o geral clara e concisa do projeto/c√≥digo
4. Para cada componente/algoritmo importante, detalhe:
   - Conceito/funcionalidade
   - Complexidade de tempo e espa√ßo (quando relevante)
   - Exemplos de uso com c√≥digo
5. Inclua se√ß√µes para requisitos, instala√ß√£o e uso
6. Adicione exemplos de c√≥digo claros e pr√°ticos
7. N√ÉO inclua se√ß√µes de "Contribui√ß√µes" ou "Licen√ßa"
8. Seja detalhado e did√°tico, mas evite informa√ß√µes redundantes
9. O README deve ser auto-contido e fornecer todas as informa√ß√µes necess√°rias para usar o c√≥digo
10. Utilize markdown para formatar bem o texto, com t√≠tulos, subt√≠tulos, listas, c√≥digo, etc.

Conte√∫do do README.md (em portugu√™s do Brasil):
`.trim();