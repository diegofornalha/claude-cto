#!/bin/bash

# Cores para melhor visualiza√ß√£o
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir mensagem com formata√ß√£o
function echo_step() {
  echo -e "${YELLOW}==>${NC} ${BLUE}$1${NC}"
}

echo_step "üöÄ Iniciando processo de publica√ß√£o da extens√£o README Agent..."

# Carregar vari√°veis do arquivo .env se existir
if [ -f .env ]; then
  echo_step "üîë Carregando configura√ß√µes do arquivo .env..."
  export $(grep -v '^#' .env | xargs)
fi

# Verificar se vsce est√° instalado
if ! command -v vsce &> /dev/null; then
  echo_step "‚öôÔ∏è Instalando vsce globalmente..."
  npm install -g @vscode/vsce
fi

# Verificar a vers√£o atual
CURRENT_VERSION=$(grep -o '"version": "[^"]*"' package.json | cut -d'"' -f4)
echo_step "üìä Vers√£o atual: ${GREEN}$CURRENT_VERSION${NC}"

# Perguntar que tipo de incremento fazer
echo -e "${YELLOW}Que tipo de incremento deseja fazer?${NC}"
echo -e "1) Patch (0.0.x) - Para corre√ß√µes de bugs"
echo -e "2) Minor (0.x.0) - Para novas funcionalidades"
echo -e "3) Major (x.0.0) - Para mudan√ßas importantes"
echo -e "4) Nenhum - Manter vers√£o atual"
read -p "Escolha (1-4): " VERSION_CHOICE

VERSION_TYPE=""
case $VERSION_CHOICE in
  1) VERSION_TYPE="patch" ;;
  2) VERSION_TYPE="minor" ;;
  3) VERSION_TYPE="major" ;;
  4) VERSION_TYPE="" ;;
  *) echo "Op√ß√£o inv√°lida. Mantendo a vers√£o atual."; VERSION_TYPE="" ;;
esac

# Verificar se o token est√° definido
if [ -z "$VSCE_PAT" ]; then
  echo_step "${RED}Token de acesso pessoal (PAT) n√£o encontrado!${NC}"
  echo "Por favor, defina a vari√°vel de ambiente VSCE_PAT:"
  echo "export VSCE_PAT=seu_token_aqui"
  
  # Perguntar se deseja continuar mesmo sem o token
  read -p "Deseja inserir o token agora? (s/n): " TOKEN_CHOICE
  if [ "$TOKEN_CHOICE" = "s" ]; then
    read -sp "Insira seu token de acesso pessoal: " VSCE_PAT
    echo ""
    export VSCE_PAT
  else
    echo "Publica√ß√£o cancelada. Configure o token e tente novamente."
    exit 1
  fi
fi

# Verificar se h√° arquivos n√£o commitados
if [[ -n $(git status -s) ]]; then
  echo_step "${RED}‚ö†Ô∏è Existem mudan√ßas n√£o commitadas no reposit√≥rio!${NC}"
  git status -s
  
  # Perguntar se deseja continuar mesmo com mudan√ßas n√£o commitadas
  read -p "Deseja continuar mesmo assim? (s/n): " CONTINUE_CHOICE
  if [ "$CONTINUE_CHOICE" != "s" ]; then
    echo "Publica√ß√£o cancelada. Commit suas mudan√ßas e tente novamente."
    exit 1
  fi
fi

# Preparar a extens√£o
echo_step "üì¶ Empacotando extens√£o..."
npx @vscode/vsce package

# Publicar a extens√£o
echo_step "üåé Publicando extens√£o na VS Code Marketplace..."
if [ -n "$VERSION_TYPE" ]; then
  npx @vscode/vsce publish $VERSION_TYPE
else
  npx @vscode/vsce publish
fi

# Verificar se a publica√ß√£o foi bem-sucedida
if [ $? -eq 0 ]; then
  # Obter a nova vers√£o ap√≥s a publica√ß√£o
  NEW_VERSION=$(grep -o '"version": "[^"]*"' package.json | cut -d'"' -f4)
  
  echo_step "${GREEN}‚úÖ Extens√£o publicada com sucesso!${NC}"
  echo -e "A extens√£o README Agent v${GREEN}$NEW_VERSION${NC} est√° dispon√≠vel em:"
  echo -e "${BLUE}https://marketplace.visualstudio.com/items?itemName=diegofornalha.readme-agent-vsix${NC}"
  
  # Criar uma tag no Git para a vers√£o
  echo_step "üè∑Ô∏è Criando tag git para a vers√£o..."
  git tag -a "v$NEW_VERSION" -m "Vers√£o $NEW_VERSION"
  git push origin "v$NEW_VERSION"
else
  echo_step "${RED}‚ùå Falha ao publicar a extens√£o!${NC}"
  echo "Verifique os erros acima e tente novamente."
fi 