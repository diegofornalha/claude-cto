#!/usr/bin/env python3
"""
ü§ñ AGENTE DE NOTIFICA√á√ïES INTELIGENTE - CURSOR IDE
==================================================

OBJETIVO: Agente aut√¥nomo para gerenciar notifica√ß√µes inteligentes no Cursor IDE

RECURSOS AVAN√áADOS:
- Detec√ß√£o autom√°tica de contexto
- Notifica√ß√µes inteligentes baseadas em prioridade
- Sistema de templates personaliz√°veis
- Integra√ß√£o com m√∫ltiplos canais
- Machine Learning para otimiza√ß√£o
- Dashboard de analytics

PADR√ÉO: CrewAI Agent com capacidades de notifica√ß√£o
"""

import os
import sys
import json
import psutil
import asyncio
import logging
from typing import Dict, Optional, List, Any, Union
from datetime import datetime, timedelta
from pathlib import Path
from dataclasses import dataclass, field
from enum import Enum
import threading
import time
import subprocess

# Configura√ß√µes de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class NotificationPriority(Enum):
    """Prioridades de notifica√ß√£o"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class NotificationChannel(Enum):
    """Canais de notifica√ß√£o dispon√≠veis"""
    TERMINAL = "terminal"
    DESKTOP = "desktop"
    WEBHOOK = "webhook"
    EMAIL = "email"
    SLACK = "slack"
    DISCORD = "discord"

@dataclass
class NotificationTemplate:
    """Template para notifica√ß√µes"""
    name: str
    title: str
    message: str
    priority: NotificationPriority
    channel: NotificationChannel
    color: str
    emoji: str
    sound: bool = True
    duration: int = 5000  # ms

@dataclass
class NotificationEvent:
    """Evento de notifica√ß√£o"""
    id: str
    template: str
    title: str
    message: str
    priority: NotificationPriority
    channel: NotificationChannel
    timestamp: datetime
    metadata: Dict[str, Any] = field(default_factory=dict)
    read: bool = False
    acknowledged: bool = False

class NotificationAgent:
    """Agente inteligente de notifica√ß√µes para Cursor IDE"""
    
    def __init__(self, config_path: Optional[str] = None):
        self.config_path = Path(config_path) if config_path else Path("notification_config.json")
        self.config = self._load_config()
        self.templates = self._load_templates()
        self.notification_history: List[NotificationEvent] = []
        self.active_notifications: Dict[str, NotificationEvent] = {}
        self.is_cursor = self._detect_cursor_ide()
        self.analytics = NotificationAnalytics()
        
        # Inicializar canais
        self.channels = self._initialize_channels()
        
        # Thread de monitoramento
        self.monitoring_thread = None
        self.should_monitor = False
        
    def _load_config(self) -> Dict[str, Any]:
        """Carrega configura√ß√£o avan√ßada"""
        default_config = {
            "agent": {
                "name": "NotificationAgent",
                "version": "2.0.0",
                "auto_start": True,
                "intelligent_routing": True
            },
            "notifications": {
                "enabled": True,
                "max_concurrent": 5,
                "default_priority": "medium",
                "default_channel": "terminal"
            },
            "channels": {
                "terminal": {
                    "enabled": True,
                    "colors": True,
                    "sounds": True,
                    "title_updates": True
                },
                "desktop": {
                    "enabled": False,
                    "timeout": 5000
                },
                "webhook": {
                    "enabled": False,
                    "url": "",
                    "headers": {}
                }
            },
            "templates": {
                "default": {
                    "title": "Notifica√ß√£o",
                    "message": "Mensagem padr√£o",
                    "priority": "medium",
                    "color": "\033[1;36m",
                    "emoji": "‚ÑπÔ∏è"
                }
            },
            "analytics": {
                "enabled": True,
                "retention_days": 30,
                "track_engagement": True
            }
        }
        
        try:
            if self.config_path.exists():
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    self._deep_merge(default_config, loaded_config)
        except Exception as e:
            logger.warning(f"Erro ao carregar config: {e}")
            
        return default_config
    
    def _load_templates(self) -> Dict[str, NotificationTemplate]:
        """Carrega templates de notifica√ß√£o"""
        templates = {}
        
        # Templates padr√£o
        default_templates = {
            "task_completed": NotificationTemplate(
                name="task_completed",
                title="üéâ Task Conclu√≠da!",
                message="Task {task_name} foi conclu√≠da com sucesso em {duration}",
                priority=NotificationPriority.MEDIUM,
                channel=NotificationChannel.TERMINAL,
                color="\033[1;32m",
                emoji="üéâ"
            ),
            "task_failed": NotificationTemplate(
                name="task_failed",
                title="‚ùå Task Falhou!",
                message="Task {task_name} falhou: {error}",
                priority=NotificationPriority.HIGH,
                channel=NotificationChannel.TERMINAL,
                color="\033[1;31m",
                emoji="‚ùå"
            ),
            "system_alert": NotificationTemplate(
                name="system_alert",
                title="üö® Alerta do Sistema",
                message="{message}",
                priority=NotificationPriority.CRITICAL,
                channel=NotificationChannel.TERMINAL,
                color="\033[1;35m",
                emoji="üö®"
            ),
            "info": NotificationTemplate(
                name="info",
                title="‚ÑπÔ∏è Informa√ß√£o",
                message="{message}",
                priority=NotificationPriority.LOW,
                channel=NotificationChannel.TERMINAL,
                color="\033[1;36m",
                emoji="‚ÑπÔ∏è"
            )
        }
        
        # Carregar templates customizados da config
        config_templates = self.config.get("templates", {})
        for name, template_data in config_templates.items():
            if name not in default_templates:
                try:
                    default_templates[name] = NotificationTemplate(
                        name=name,
                        title=template_data.get("title", "Notifica√ß√£o"),
                        message=template_data.get("message", "Mensagem"),
                        priority=NotificationPriority(template_data.get("priority", "medium")),
                        channel=NotificationChannel(template_data.get("channel", "terminal")),
                        color=template_data.get("color", "\033[1;36m"),
                        emoji=template_data.get("emoji", "‚ÑπÔ∏è")
                    )
                except Exception as e:
                    logger.warning(f"Erro ao carregar template {name}: {e}")
        
        return default_templates
    
    def _initialize_channels(self) -> Dict[NotificationChannel, Any]:
        """Inicializa canais de notifica√ß√£o"""
        channels = {}
        
        # Canal Terminal
        if self.config["channels"]["terminal"]["enabled"]:
            channels[NotificationChannel.TERMINAL] = TerminalChannel(self.config["channels"]["terminal"])
        
        # Canal Desktop (se dispon√≠vel)
        if self.config["channels"]["desktop"]["enabled"]:
            try:
                channels[NotificationChannel.DESKTOP] = DesktopChannel(self.config["channels"]["desktop"])
            except Exception as e:
                logger.warning(f"Desktop channel n√£o dispon√≠vel: {e}")
        
        # Canal Webhook
        if self.config["channels"]["webhook"]["enabled"]:
            channels[NotificationChannel.WEBHOOK] = WebhookChannel(self.config["channels"]["webhook"])
        
        return channels
    
    def _detect_cursor_ide(self) -> bool:
        """Detecta se est√° executando no Cursor IDE"""
        try:
            env_indicators = [
                'VSCODE_IPC_HOOK',
                'VSCODE_PID',
                'CURSOR_PID',
                'TERM_PROGRAM'
            ]
            
            for env_var in env_indicators:
                value = os.environ.get(env_var, '')
                if 'cursor' in value.lower() or 'vscode' in value.lower():
                    return True
            
            # Verificar processo pai
            try:
                current_pid = os.getpid()
                parent = psutil.Process(current_pid).parent()
                
                while parent and parent.pid != 1:
                    process_name = parent.name().lower()
                    if 'cursor' in process_name or 'code' in process_name:
                        return True
                    parent = parent.parent()
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
            
            return False
        except Exception:
            return False
    
    def _deep_merge(self, base: Dict, update: Dict):
        """Merge profundo de configura√ß√µes"""
        for key, value in update.items():
            if key in base and isinstance(base[key], dict) and isinstance(value, dict):
                self._deep_merge(base[key], value)
            else:
                base[key] = value
    
    async def send_notification(
        self,
        template_name: str,
        **kwargs
    ) -> Optional[NotificationEvent]:
        """Envia notifica√ß√£o usando template"""
        if not self.config["notifications"]["enabled"]:
            return None
        
        template = self.templates.get(template_name)
        if not template:
            logger.warning(f"Template '{template_name}' n√£o encontrado")
            return None
        
        # Criar evento de notifica√ß√£o
        event = NotificationEvent(
            id=f"notif_{int(time.time() * 1000)}",
            template=template_name,
            title=template.title.format(**kwargs),
            message=template.message.format(**kwargs),
            priority=template.priority,
            channel=template.channel,
            timestamp=datetime.now(),
            metadata=kwargs
        )
        
        # Adicionar ao hist√≥rico
        self.notification_history.append(event)
        self.active_notifications[event.id] = event
        
        # Enviar atrav√©s do canal apropriado
        channel = self.channels.get(template.channel)
        if channel:
            try:
                await channel.send(event)
                logger.info(f"Notifica√ß√£o enviada: {event.title}")
            except Exception as e:
                logger.error(f"Erro ao enviar notifica√ß√£o: {e}")
        
        # Analytics
        self.analytics.track_notification(event)
        
        # Limpar hist√≥rico antigo
        self._cleanup_old_notifications()
        
        return event
    
    def _cleanup_old_notifications(self):
        """Remove notifica√ß√µes antigas do hist√≥rico"""
        retention_days = self.config["analytics"]["retention_days"]
        cutoff_date = datetime.now() - timedelta(days=retention_days)
        
        self.notification_history = [
            n for n in self.notification_history 
            if n.timestamp > cutoff_date
        ]
        
        # Limitar n√∫mero de notifica√ß√µes ativas
        max_concurrent = self.config["notifications"]["max_concurrent"]
        if len(self.active_notifications) > max_concurrent:
            # Remover as mais antigas
            sorted_notifications = sorted(
                self.active_notifications.values(),
                key=lambda x: x.timestamp
            )
            for notification in sorted_notifications[:-max_concurrent]:
                del self.active_notifications[notification.id]
    
    def start_monitoring(self):
        """Inicia monitoramento em background"""
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            return
        
        self.should_monitor = True
        self.monitoring_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        self.monitoring_thread.start()
        logger.info("Monitoramento de notifica√ß√µes iniciado")
    
    def stop_monitoring(self):
        """Para monitoramento"""
        self.should_monitor = False
        if self.monitoring_thread:
            self.monitoring_thread.join(timeout=1)
        logger.info("Monitoramento de notifica√ß√µes parado")
    
    def _monitoring_loop(self):
        """Loop de monitoramento"""
        while self.should_monitor:
            try:
                # Verificar notifica√ß√µes n√£o lidas
                unread_count = len([n for n in self.notification_history if not n.read])
                
                # Atualizar t√≠tulo do terminal se necess√°rio
                if self.is_cursor and unread_count > 0:
                    self._update_terminal_title(f"({unread_count}) Notifica√ß√µes")
                
                time.sleep(5)  # Verificar a cada 5 segundos
                
            except Exception as e:
                logger.error(f"Erro no loop de monitoramento: {e}")
                time.sleep(10)
    
    def _update_terminal_title(self, title: str):
        """Atualiza t√≠tulo do terminal"""
        try:
            print(f"\033]0;{title}\007", end="", flush=True)
        except:
            pass
    
    def get_analytics(self) -> Dict[str, Any]:
        """Retorna analytics das notifica√ß√µes"""
        return self.analytics.get_summary()
    
    def acknowledge_notification(self, notification_id: str):
        """Marca notifica√ß√£o como lida"""
        if notification_id in self.active_notifications:
            self.active_notifications[notification_id].acknowledged = True
            self.active_notifications[notification_id].read = True
    
    def get_unread_count(self) -> int:
        """Retorna n√∫mero de notifica√ß√µes n√£o lidas"""
        return len([n for n in self.notification_history if not n.read])

class TerminalChannel:
    """Canal de notifica√ß√£o para terminal"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
    
    async def send(self, event: NotificationEvent):
        """Envia notifica√ß√£o no terminal"""
        if not self.config["enabled"]:
            return
        
        # Criar caixa visual
        box = self._create_notification_box(event)
        
        # Emitir som se habilitado
        if self.config["sounds"]:
            print("\a", end="", flush=True)
        
        # Exibir notifica√ß√£o
        print(box)
        
        # Atualizar t√≠tulo se habilitado
        if self.config["title_updates"]:
            self._update_terminal_title(event.title)
    
    def _create_notification_box(self, event: NotificationEvent) -> str:
        """Cria caixa visual para notifica√ß√£o"""
        color = event.metadata.get("color", "\033[1;36m")
        reset = "\033[0m"
        
        # Largura da caixa
        max_width = max(len(event.title), len(event.message)) + 4
        box_width = max(50, max_width)
        
        # Bordas
        top_border = "‚ïî" + "‚ïê" * (box_width - 2) + "‚ïó"
        bottom_border = "‚ïö" + "‚ïê" * (box_width - 2) + "‚ïù"
        
        # Texto centralizado
        title_padded = event.title.center(box_width - 2)
        message_padded = event.message.center(box_width - 2)
        
        # Montar caixa
        box = f"{color}{top_border}\n"
        box += f"‚ïë{title_padded}‚ïë\n"
        box += f"‚ïë{' ' * (box_width - 2)}‚ïë\n"
        box += f"‚ïë{message_padded}‚ïë\n"
        box += f"{bottom_border}{reset}"
        
        return box
    
    def _update_terminal_title(self, title: str):
        """Atualiza t√≠tulo do terminal"""
        try:
            print(f"\033]0;{title}\007", end="", flush=True)
        except:
            pass

class DesktopChannel:
    """Canal de notifica√ß√£o para desktop (Linux)"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
    
    async def send(self, event: NotificationEvent):
        """Envia notifica√ß√£o desktop"""
        try:
            # Usar notify-send no Linux
            cmd = [
                "notify-send",
                "-t", str(self.config["timeout"]),
                "-u", self._get_urgency(event.priority),
                event.title,
                event.message
            ]
            
            subprocess.run(cmd, check=True)
        except Exception as e:
            logger.warning(f"Erro ao enviar notifica√ß√£o desktop: {e}")

class WebhookChannel:
    """Canal de notifica√ß√£o via webhook"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
    
    async def send(self, event: NotificationEvent):
        """Envia notifica√ß√£o via webhook"""
        # Implementar envio via webhook
        pass

class NotificationAnalytics:
    """Analytics para notifica√ß√µes"""
    
    def __init__(self):
        self.stats = {
            "total_sent": 0,
            "total_read": 0,
            "by_priority": {},
            "by_channel": {},
            "by_template": {},
            "engagement_rate": 0.0
        }
    
    def track_notification(self, event: NotificationEvent):
        """Registra estat√≠sticas da notifica√ß√£o"""
        self.stats["total_sent"] += 1
        
        # Por prioridade
        priority = event.priority.value
        self.stats["by_priority"][priority] = self.stats["by_priority"].get(priority, 0) + 1
        
        # Por canal
        channel = event.channel.value
        self.stats["by_channel"][channel] = self.stats["by_channel"].get(channel, 0) + 1
        
        # Por template
        template = event.template
        self.stats["by_template"][template] = self.stats["by_template"].get(template, 0) + 1
    
    def get_summary(self) -> Dict[str, Any]:
        """Retorna resumo das estat√≠sticas"""
        if self.stats["total_sent"] > 0:
            self.stats["engagement_rate"] = (self.stats["total_read"] / self.stats["total_sent"]) * 100
        
        return self.stats.copy()

# Fun√ß√£o principal para uso direto
async def main():
    """Fun√ß√£o principal para demonstra√ß√£o"""
    agent = NotificationAgent()
    
    print("ü§ñ Agente de Notifica√ß√µes Iniciado!")
    print(f"üéØ Cursor IDE detectado: {'‚úÖ' if agent.is_cursor else '‚ùå'}")
    
    # Iniciar monitoramento
    agent.start_monitoring()
    
    # Exemplo de notifica√ß√µes
    await agent.send_notification("info", message="Sistema iniciado com sucesso!")
    await asyncio.sleep(2)
    
    await agent.send_notification("task_completed", task_name="Setup", duration="30s")
    await asyncio.sleep(2)
    
    await agent.send_notification("system_alert", message="Monitoramento ativo")
    
    # Manter rodando
    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë Parando agente...")
        agent.stop_monitoring()

if __name__ == "__main__":
    asyncio.run(main())
