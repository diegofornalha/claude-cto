#!/usr/bin/env python3
"""
üîÑ SISTEMA DE MONITORAMENTO PERSISTENTE INFINITO COM NOTIFICA√á√ïES CURSOR
======================================================================

OBJETIVO: Monitor infinito integrado com sistema de notifica√ß√µes visuais para Cursor IDE.

NOVAS CARACTER√çSTICAS:
- Sistema de notifica√ß√µes visuais completo
- Detec√ß√£o autom√°tica do Cursor IDE
- Notifica√ß√µes com sons e cores
- T√≠tulos din√¢micos da janela do terminal
- Configura√ß√µes personaliz√°veis

ULTRATHINK: Integra√ß√£o completa entre monitoramento e notifica√ß√µes para m√°xima visibilidade.

USO:
    python monitor_infinito_notif.py              # Ativa monitor com notifica√ß√µes
    python monitor_infinito_notif.py --stop       # Para monitor
    python monitor_infinito_notif.py --status     # Status atual
    python monitor_infinito_notif.py --test-notif # Testa notifica√ß√µes
    python monitor_infinito_notif.py --config     # Configura notifica√ß√µes

PRINC√çPIO: NUNCA PARA SOZINHO + NOTIFICA√á√ïES INTELIGENTES!
"""

import sys
import json
import time
import signal
import subprocess
import logging
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any, Set
import psutil

# Importa sistema de notifica√ß√µes
try:
    from cursor_notifications import CursorNotifications
except ImportError:
    # Fallback se cursor_notifications n√£o estiver dispon√≠vel
    class CursorNotifications:
        def __init__(self): pass
        def notify_task_completion(self, *args, **kwargs): pass
        def notify_monitor_event(self, *args, **kwargs): pass
        def get_notification_summary(self): return {}

# Configura√ß√µes
BASE_DIR = Path("/home/suthub/.claude/claude-cto")
PID_FILE = BASE_DIR / "monitor_infinito_notif.pid"
LOG_FILE = BASE_DIR / "monitor_infinito_notif.log"
ESTADO_FILE = BASE_DIR / "monitor_infinito_notif_estado.json"

class MonitorInfinitoNotif:
    """Sistema de Monitoramento Persistente Infinito com Notifica√ß√µes"""
    
    def __init__(self):
        self.ativo = True
        self.inicio = datetime.now()
        self.total_verificacoes = 0
        self.tasks_completadas = set()  # Usar set para evitar duplicatas
        self.tasks_falhadas = set()
        self.ultima_verificacao = None
        
        # Sistema de notifica√ß√µes
        self.notificador = CursorNotifications()
        
        # Configurar logging
        self._setup_logging()
        
        # Configurar handlers de sinal
        signal.signal(signal.SIGINT, self._handler_parada)
        signal.signal(signal.SIGTERM, self._handler_parada)
        
        # Salvar PID
        self._salvar_pid()
        
        # Notificar in√≠cio do monitor
        self.notificador.notify_monitor_event("start", "Monitor Infinito com Notifica√ß√µes iniciado")
        
    def _setup_logging(self):
        """Configura logging com formato limpo"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(message)s',
            handlers=[
                logging.FileHandler(LOG_FILE, encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def _handler_parada(self, signum, frame):
        """Handler para parada manual (Ctrl+C ou SIGTERM)"""
        self.logger.info(f"\nüõë SINAL {signum} RECEBIDO - PARANDO MONITORAMENTO...")
        self.notificador.notify_monitor_event("stop", f"Monitor parado por sinal {signum}")
        self.ativo = False
        
    def _salvar_pid(self):
        """Salva PID do processo atual"""
        try:
            with open(PID_FILE, 'w') as f:
                f.write(str(os.getpid()))
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao salvar PID: {e}")
            
    def _salvar_estado(self):
        """Salva estado atual do monitoramento"""
        notif_summary = self.notificador.get_notification_summary()
        
        estado = {
            "inicio": self.inicio.isoformat(),
            "total_verificacoes": self.total_verificacoes,
            "tasks_completadas": list(self.tasks_completadas),
            "tasks_falhadas": list(self.tasks_falhadas),
            "ultima_verificacao": self.ultima_verificacao.isoformat() if self.ultima_verificacao else None,
            "tempo_ativo": str(datetime.now() - self.inicio),
            "notificacoes": notif_summary
        }
        
        try:
            with open(ESTADO_FILE, 'w', encoding='utf-8') as f:
                json.dump(estado, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao salvar estado: {e}")
            
    def get_all_tasks(self) -> Optional[List[Dict]]:
        """Busca todas as tasks via MCP com m√∫ltiplas estrat√©gias - NUNCA FALHA"""
        # Estrat√©gia 1: Claude MCP direto
        try:
            cmd = ['claude', 'mcp', 'claude-cto', 'list_tasks', '{"limit": 100}']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                data = json.loads(result.stdout)
                tasks = data.get('tasks', [])
                if tasks:
                    self.logger.debug(f"‚úÖ {len(tasks)} tasks via MCP")
                    return tasks
        except Exception as e:
            self.logger.debug(f"MCP falhou: {e}")
            
        # Estrat√©gia 2: API Python direta
        try:
            script_dir = BASE_DIR / "claude_cto"
            if (script_dir / "__init__.py").exists():
                cmd = [
                    sys.executable, "-c",
                    """
import sys
sys.path.append('/home/suthub/.claude/claude-cto')
from claude_cto.server.crud import get_all_tasks_from_db
import json
tasks = get_all_tasks_from_db()
result = {"tasks": [{"id": t.id, "status": t.status, "identifier": getattr(t, 'task_identifier', f'task_{t.id}'), "created_at": t.created_at.isoformat() if hasattr(t, 'created_at') and t.created_at else ""} for t in tasks]}
print(json.dumps(result))
"""
                ]
                
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
                
                if result.returncode == 0:
                    data = json.loads(result.stdout)
                    tasks = data.get('tasks', [])
                    if tasks:
                        self.logger.debug(f"‚úÖ {len(tasks)} tasks via DB")
                        return tasks
        except Exception as e:
            self.logger.debug(f"DB falhou: {e}")
            
        # Estrat√©gia 3: Sempre retorna lista vazia para NUNCA PARAR
        self.logger.debug("üìã Sem tasks detectadas - continuando monitoramento")
        return []
    
    def formatar_duracao(self, inicio_str: str) -> str:
        """Formata dura√ß√£o de forma leg√≠vel"""
        try:
            if not inicio_str:
                return "tempo desconhecido"
                
            inicio = datetime.fromisoformat(inicio_str.replace('Z', '+00:00'))
            agora = datetime.now().replace(tzinfo=inicio.tzinfo)
            duracao = agora - inicio
            
            total_segundos = int(duracao.total_seconds())
            horas = total_segundos // 3600
            minutos = (total_segundos % 3600) // 60
            segundos = total_segundos % 60
            
            if horas > 0:
                return f"{horas}h {minutos}min"
            elif minutos > 0:
                return f"{minutos}min {segundos}s"
            else:
                return f"{segundos}s"
        except:
            return "tempo desconhecido"
    
    def _detectar_mudancas_status(self, tasks: List[Dict]) -> Dict[str, List[Dict]]:
        """Detecta mudan√ßas de status das tasks para notificar"""
        mudancas = {
            "novas_completadas": [],
            "novas_falhadas": [],
            "novas_iniciadas": []
        }
        
        # Verifica novas tasks completadas
        for task in tasks:
            task_id = task.get('id')
            if not task_id:
                continue
                
            if task.get('status') == 'completed' and task_id not in self.tasks_completadas:
                self.tasks_completadas.add(task_id)
                mudancas["novas_completadas"].append(task)
                
            elif task.get('status') == 'failed' and task_id not in self.tasks_falhadas:
                self.tasks_falhadas.add(task_id)
                mudancas["novas_falhadas"].append(task)
                
        return mudancas
    
    def _processar_notificacoes(self, mudancas: Dict[str, List[Dict]]):
        """Processa e envia notifica√ß√µes para mudan√ßas detectadas"""
        
        # Notifica tasks completadas
        for task in mudancas["novas_completadas"]:
            task_id = task.get('id')
            nome = task.get('identifier', f'Task-{task_id}')
            duracao = self.formatar_duracao(task.get('created_at', ''))
            
            self.notificador.notify_task_completion(
                task_id=str(task_id),
                task_name=nome,
                status="completed",
                duration=duracao
            )
            
            self.logger.info(f"üéâ NOTIFICA√á√ÉO: Task {task_id} '{nome}' CONCLU√çDA! | Tempo: {duracao}")
        
        # Notifica tasks falhadas
        for task in mudancas["novas_falhadas"]:
            task_id = task.get('id')
            nome = task.get('identifier', f'Task-{task_id}')
            duracao = self.formatar_duracao(task.get('created_at', ''))
            
            self.notificador.notify_task_completion(
                task_id=str(task_id),
                task_name=nome,
                status="failed",
                duration=duracao
            )
            
            self.logger.error(f"‚ùå NOTIFICA√á√ÉO: Task {task_id} '{nome}' FALHOU! | Tempo: {duracao}")
    
    def monitor_infinito(self):
        """LOOP INFINITO PRINCIPAL COM NOTIFICA√á√ïES - NUNCA PARA SOZINHO"""
        
        # Interface clara sobre comportamento infinito
        os.system('clear')
        print("\n" + "=" * 80)
        print("üîÑ MONITOR INFINITO ULTRATHINK COM NOTIFICA√á√ïES CURSOR")
        print("=" * 80)
        print(f"\nüéØ Sistema de Notifica√ß√µes: {'‚úÖ Cursor IDE' if self.notificador.is_cursor else 'üìü Terminal Padr√£o'}")
        print("\n‚ö†Ô∏è  COMPORTAMENTO INFINITO:")
        print("   ‚Ä¢ Este monitor NUNCA PARA automaticamente")
        print("   ‚Ä¢ Notifica√ß√µes visuais quando tasks completam")
        print("   ‚Ä¢ Continuar√° mesmo sem tasks")
        print("   ‚Ä¢ Continuar√° mesmo com erros")
        print("   ‚Ä¢ √önica forma de parar: Ctrl+C")
        print("\nüìÖ Iniciado em: " + self.inicio.strftime("%Y-%m-%d %H:%M:%S"))
        print("=" * 80 + "\n")
        
        self.logger.info("üöÄ MONITOR INFINITO COM NOTIFICA√á√ïES INICIADO - Loop eterno ativado")
        
        try:
            iteracao = 0
            while self.ativo:  # Loop infinito real
                iteracao += 1
                    
                self.total_verificacoes += 1
                self.ultima_verificacao = datetime.now()
                
                # Busca tasks atuais
                tasks = self.get_all_tasks()
                
                if tasks is None:
                    self.logger.warning("‚ùå Falha na verifica√ß√£o - continuando...")
                    self._pausa_limpa(10)
                    continue
                    
                # Detecta mudan√ßas de status para notifica√ß√µes
                mudancas = self._detectar_mudancas_status(tasks)
                
                # Processa notifica√ß√µes
                self._processar_notificacoes(mudancas)
                
                # Separa tasks por status
                running = [t for t in tasks if t.get('status') == 'running']
                completed = [t for t in tasks if t.get('status') == 'completed']
                failed = [t for t in tasks if t.get('status') == 'failed']
                pending = [t for t in tasks if t.get('status') == 'pending']
                
                # Status visual melhorado
                tempo_ativo = datetime.now() - self.inicio
                
                # Indicador de atividade visual
                spinner = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è']
                spin = spinner[iteracao % len(spinner)]
                
                status_notif = f"üìä Notifica√ß√µes: {len(self.tasks_completadas)} ‚úÖ | {len(self.tasks_falhadas)} ‚ùå"
                self.logger.info(f"{spin} Ciclo #{self.total_verificacoes} | Loop h√°: {self._formatar_tempo_ativo(tempo_ativo)} | {status_notif}")
                
                if running:
                    self.logger.info(f"‚è≥ {len(running)} tasks ATIVAS:")
                    for task in running:
                        task_id = task.get('id')
                        nome = task.get('identifier', f'Task-{task_id}')
                        duracao = self.formatar_duracao(task.get('created_at', ''))
                        self.logger.info(f"  üîÑ Task {task_id}: '{nome}' | Rodando h√°: {duracao}")
                        
                if not running and not pending:
                    if completed or failed:
                        self.logger.info(f"‚úÖ Tasks finalizadas ({len(self.tasks_completadas)} notificadas) - MONITORAMENTO CONTINUA...")
                    else:
                        self.logger.info(f"‚è≥ Sem tasks ativas - Loop infinito continua... (Ctrl+C para parar)")
                else:
                    resumo_status = []
                    if running: resumo_status.append(f"{len(running)} running")
                    if pending: resumo_status.append(f"{len(pending)} pending")
                    if completed: resumo_status.append(f"{len(completed)} completed")
                    if failed: resumo_status.append(f"{len(failed)} failed")
                    
                    self.logger.info(f"üìä Status: {' | '.join(resumo_status)}")
                
                # Salva estado
                self._salvar_estado()
                
                # Pausa inteligente baseada em atividade
                intervalo = 5 if running else 10
                self._pausa_limpa(intervalo)
                
        except KeyboardInterrupt:
            self.logger.info("\n‚èπÔ∏è Interrup√ß√£o manual detectada - finalizando...")
            self.ativo = False
        except Exception as e:
            self.logger.error(f"üí• Erro recuperado: {str(e)}")
            self.logger.info("üîÑ Auto-recovery ativado - continuando monitoramento...")
            time.sleep(3)
            
            if self.ativo:
                self.logger.info("‚ôªÔ∏è Reiniciando loop infinito ap√≥s erro...")
                return self.monitor_infinito()  # Recurs√£o para NUNCA PARAR
            
        finally:
            self._finalizar()
    
    def _pausa_limpa(self, segundos: int):
        """Pausa limpa usando time.sleep - SEM BYPASS"""
        try:
            time.sleep(segundos)
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è Interrup√ß√£o manual detectada")
            self.ativo = False
    
    def _formatar_tempo_ativo(self, delta: timedelta) -> str:
        """Formata tempo que o monitor est√° ativo"""
        total_segundos = int(delta.total_seconds())
        horas = total_segundos // 3600
        minutos = (total_segundos % 3600) // 60
        segundos = total_segundos % 60
        
        if horas > 0:
            return f"{horas}h {minutos}min {segundos}s"
        elif minutos > 0:
            return f"{minutos}min {segundos}s"
        else:
            return f"{segundos}s"
    
    def _finalizar(self):
        """Finaliza monitoramento de forma segura"""
        tempo_total = datetime.now() - self.inicio
        notif_summary = self.notificador.get_notification_summary()
        
        self.logger.info("=" * 60)
        self.logger.info("üèÅ MONITOR INFINITO COM NOTIFICA√á√ïES FINALIZADO")
        self.logger.info(f"   ‚è±Ô∏è  Tempo ativo: {self._formatar_tempo_ativo(tempo_total)}")
        self.logger.info(f"   üîç Total de verifica√ß√µes: {self.total_verificacoes}")
        self.logger.info(f"   üéâ Tasks completadas notificadas: {len(self.tasks_completadas)}")
        self.logger.info(f"   ‚ùå Tasks falhadas notificadas: {len(self.tasks_falhadas)}")
        self.logger.info(f"   üìä Total de notifica√ß√µes: {notif_summary.get('total_notifications', 0)}")
        self.logger.info("=" * 60)
        
        # Notifica parada
        self.notificador.notify_monitor_event("stop", "Monitor finalizado com sucesso")
        self.notificador.reset_terminal_title()
        
        # Remove PID file
        try:
            if PID_FILE.exists():
                PID_FILE.unlink()
        except:
            pass

def verificar_status():
    """Verifica se monitoramento est√° ativo"""
    if not PID_FILE.exists():
        print("‚ùå Monitor com notifica√ß√µes n√£o est√° executando")
        return False
        
    try:
        with open(PID_FILE, 'r') as f:
            pid = int(f.read().strip())
            
        if psutil.pid_exists(pid):
            processo = psutil.Process(pid)
            inicio = datetime.fromtimestamp(processo.create_time())
            tempo_ativo = datetime.now() - inicio
            
            print("‚úÖ MONITOR INFINITO COM NOTIFICA√á√ïES ATIVO")
            print(f"   üÜî PID: {pid}")
            print(f"   ‚è±Ô∏è  Ativo h√°: {tempo_ativo}")
            print(f"   üíæ CPU: {processo.cpu_percent()}%")
            print(f"   üß† Mem√≥ria: {processo.memory_info().rss / 1024 / 1024:.1f}MB")
            
            # Ler estado se dispon√≠vel
            if ESTADO_FILE.exists():
                try:
                    with open(ESTADO_FILE, 'r', encoding='utf-8') as f:
                        estado = json.load(f)
                    print(f"   üîç Verifica√ß√µes: {estado.get('total_verificacoes', 0)}")
                    print(f"   üéâ Tasks completadas: {len(estado.get('tasks_completadas', []))}")
                    print(f"   ‚ùå Tasks falhadas: {len(estado.get('tasks_falhadas', []))}")
                    
                    notif = estado.get('notificacoes', {})
                    if notif:
                        print(f"   üîî Total notifica√ß√µes: {notif.get('total_notifications', 0)}")
                        print(f"   üéØ Cursor IDE: {'‚úÖ' if notif.get('cursor_detected') else '‚ùå'}")
                except:
                    pass
                    
            return True
        else:
            print("‚ùå PID existe mas processo n√£o est√° rodando")
            PID_FILE.unlink()
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar status: {e}")
        return False

def parar_monitor():
    """Para o monitor infinito com notifica√ß√µes"""
    if not PID_FILE.exists():
        print("‚ùå Monitor com notifica√ß√µes n√£o est√° executando")
        return False
        
    try:
        with open(PID_FILE, 'r') as f:
            pid = int(f.read().strip())
            
        if psutil.pid_exists(pid):
            print(f"üõë Parando monitor com notifica√ß√µes (PID {pid})...")
            os.kill(pid, signal.SIGTERM)
            
            # Aguarda parada graceful
            for _ in range(10):
                if not psutil.pid_exists(pid):
                    break
                time.sleep(0.5)
                
            if psutil.pid_exists(pid):
                print("‚ö†Ô∏è For√ßa parada necess√°ria...")
                os.kill(pid, signal.SIGKILL)
                
            if PID_FILE.exists():
                PID_FILE.unlink()
                
            print("‚úÖ Monitor com notifica√ß√µes parado com sucesso")
            return True
        else:
            print("‚ùå Processo n√£o existe")
            PID_FILE.unlink()
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao parar monitor: {e}")
        return False

def testar_notificacoes():
    """Testa sistema de notifica√ß√µes"""
    print("üß™ TESTANDO SISTEMA DE NOTIFICA√á√ïES CURSOR IDE")
    print("=" * 60)
    
    notificador = CursorNotifications()
    print(f"Cursor IDE detectado: {'‚úÖ Sim' if notificador.is_cursor else '‚ùå N√£o'}")
    
    # Simula notifica√ß√µes de teste
    print("\nTestando notifica√ß√µes...")
    
    notificador.notify_task_completion("test_001", "Teste de Task Conclu√≠da", "completed", "2min 30s")
    time.sleep(1)
    
    notificador.notify_task_completion("test_002", "Teste de Task Falhada", "failed", "1min 15s")
    time.sleep(1)
    
    notificador.notify_monitor_event("start", "Teste de evento do monitor")
    
    summary = notificador.get_notification_summary()
    print(f"\nüìä Resumo: {summary['total_notifications']} notifica√ß√µes testadas")
    
    notificador.reset_terminal_title()
    print("‚úÖ Teste conclu√≠do!")

def configurar_notificacoes():
    """Interface para configurar notifica√ß√µes"""
    print("‚öôÔ∏è CONFIGURA√á√ÉO DE NOTIFICA√á√ïES")
    print("=" * 40)
    
    notificador = CursorNotifications()
    config_atual = notificador.config
    
    print(f"Estado atual:")
    print(f"  Habilitado: {config_atual.get('enabled', True)}")
    print(f"  Som: {config_atual.get('sound_enabled', True)}")
    print(f"  T√≠tulo: {config_atual.get('title_updates', True)}")
    print(f"  Cores: {config_atual.get('colors_enabled', True)}")
    
    print(f"\nCursor IDE detectado: {'‚úÖ Sim' if notificador.is_cursor else '‚ùå N√£o'}")
    
    # Aqui poderia adicionar interface interativa para alterar configura√ß√µes
    print("\nüí° Para alterar configura√ß√µes, edite o arquivo:")
    print(f"   {BASE_DIR}/cursor_notifications.json")

def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) > 1:
        comando = sys.argv[1]
        
        if comando == "--status":
            verificar_status()
            return
        elif comando == "--stop":
            parar_monitor()
            return
        elif comando == "--test-notif":
            testar_notificacoes()
            return
        elif comando == "--config":
            configurar_notificacoes()
            return
        elif comando == "--help":
            print(__doc__)
            return
        else:
            print(f"‚ùå Comando desconhecido: {comando}")
            print("Comandos: --status, --stop, --test-notif, --config, --help")
            return
    
    # Verificar se j√° est√° rodando
    if verificar_status():
        print("\n‚ö†Ô∏è Monitor infinito com notifica√ß√µes j√° est√° ativo!")
        print("   Use 'python monitor_infinito_notif.py --stop' para parar")
        return
        
    # Iniciar monitor infinito com notifica√ß√µes
    monitor = MonitorInfinitoNotif()
    monitor.monitor_infinito()

if __name__ == "__main__":
    main()