#!/bin/bash

# Script para reorganizar o hist√≥rico do Git
# Remove completamente arquivos tempor√°rios e sens√≠veis do hist√≥rico

# Cores para melhor visualiza√ß√£o
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${YELLOW}==>${NC} ${BLUE}üßπ Iniciando limpeza profunda do hist√≥rico Git...${NC}"

# Arquivo para armazenar a vers√£o atual
CURRENT_VERSION=$(grep -o '"version": "[^"]*"' package.json | cut -d'"' -f4)
echo -e "${YELLOW}==>${NC} ${BLUE}üìä Vers√£o atual: ${GREEN}$CURRENT_VERSION${NC}"

# 1. Salvar o estado atual de todos os arquivos importantes
echo -e "${YELLOW}==>${NC} ${BLUE}üì¶ Criando backup tempor√°rio dos arquivos importantes...${NC}"
mkdir -p _git_temp_backup
cp -r \
  src/ \
  resources/ \
  .devcontainer/ \
  .vscode/ \
  package.json \
  package-lock.json \
  tsconfig.json \
  esbuild.js \
  generate-readme-cli.js \
  reset-extension.sh \
  update-extension.sh \
  idx-push.js \
  .gitignore \
  _git_temp_backup/

# 2. Criar um branch √≥rf√£o (sem hist√≥rico)
echo -e "${YELLOW}==>${NC} ${BLUE}üå± Criando novo branch √≥rf√£o 'clean-history'...${NC}"
git checkout --orphan clean-history

# 3. Remover todos os arquivos rastreados pelo Git
echo -e "${YELLOW}==>${NC} ${BLUE}üóëÔ∏è Removendo todos os arquivos rastreados...${NC}"
git rm -rf .

# 4. Restaurar arquivos importantes do backup
echo -e "${YELLOW}==>${NC} ${BLUE}üìÇ Restaurando arquivos importantes...${NC}"
cp -r _git_temp_backup/* .
cp _git_temp_backup/.gitignore .

# 5. Remover arquivos tempor√°rios e sens√≠veis
echo -e "${YELLOW}==>${NC} ${BLUE}üîí Removendo arquivos tempor√°rios e sens√≠veis...${NC}"
rm -rf \
  .last_version \
  .version_temp \
  .tmp_vsix/ \
  *.vsix \
  .env \
  _git_temp_backup/

# 6. Adicionar todos os arquivos ao novo branch
echo -e "${YELLOW}==>${NC} ${BLUE}‚ûï Adicionando arquivos ao novo branch...${NC}"
git add .

# 7. Fazer o commit inicial
echo -e "${YELLOW}==>${NC} ${BLUE}üíæ Criando commit inicial limpo...${NC}"
git commit -m "Initial commit - Clean repository (v$CURRENT_VERSION)"

# 8. Renomear o branch para 'main' (ou outro nome padr√£o usado no projeto)
echo -e "${YELLOW}==>${NC} ${BLUE}üè∑Ô∏è Renomeando branch para 'main'...${NC}"
git branch -M main

# 9. Avisar sobre push for√ßado
echo -e "${RED}‚ö†Ô∏è  ATEN√á√ÉO: ${NC}Execute o comando a seguir para for√ßar o push e substituir o hist√≥rico:"
echo -e "${GREEN}git push -f origin main${NC}"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  AVISO IMPORTANTE:${NC} Esta opera√ß√£o √© irrevers√≠vel e substituir√° o hist√≥rico do reposit√≥rio remoto."
echo -e "Certifique-se de que todos os colaboradores estejam cientes desta mudan√ßa antes de prosseguir."
echo ""
echo -e "${BLUE}Para confirmar e realizar o push:${NC}"
echo -e "   1. Revise cuidadosamente os arquivos com ${GREEN}git status${NC}"
echo -e "   2. Execute ${GREEN}git push -f origin main${NC} para for√ßar o push" 