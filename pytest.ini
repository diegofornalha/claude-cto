[pytest]
# Configuração do pytest para testes da API Claude CTO

# Diretórios de teste
testpaths = tests

# Padrão de descoberta de arquivos de teste
python_files = test_*.py *_test.py

# Padrão de descoberta de classes de teste
python_classes = Test*

# Padrão de descoberta de funções de teste
python_functions = test_*

# Adicionar diretório raiz ao PYTHONPATH
pythonpath = .

# Nível mínimo de log
log_cli = true
log_cli_level = INFO

# Formato de log
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Opções de execução
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --cov=claude_cto
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-fail-under=80

# Marcadores customizados
markers =
    slow: marca testes que demoram para executar
    integration: marca testes de integração
    unit: marca testes unitários
    api: marca testes de API
    database: marca testes que usam banco de dados
    async: marca testes assíncronos

# Configuração de timeout (em segundos)
timeout = 60

# Configuração para testes assíncronos
asyncio_mode = auto

# Ignorar arquivos/diretórios
norecursedirs = .git .tox dist build *.egg venv node_modules master_dashboard-*

# Configuração de cobertura
[coverage:run]
source = claude_cto
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */node_modules/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract